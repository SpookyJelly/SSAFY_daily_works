# 5215번 햄버거 다이어트

"""
민기가 좋아하는 햄버거를 먹으면서도
다이어트에 성공할 수 있도록 정해진 칼로리 이하의 조합 중에서 민기가 가장 선호하는 햄버거를 조합해주는 프로그램을 만들어보자.

(단 여러 재료를 조합하였을 햄버거의 선호도는 조합된 재료들의 맛에 대한 점수의 합으로 결정되고,
같은 재료를 여러 번 사용할 수 없으며, 햄버거의 조합의 제한은 칼로리를 제외하고는 없다.)



[입력]


첫 번째 줄에 테스트 케이스의 수 T가 주어진다.
각 테스트 케이스의 첫 번째 줄에는 재료의 수,
제한 칼로리를 나타내는 N, L(1 ≤ N ≤ 20, 1 ≤ L ≤ 104)가 공백으로 구분되어 주어진다.
다음 N개의 줄에는 재료에 대한 민기의 맛에 대한 점수와 칼로리를 나타내는
Ti, Ki(1 ≤ Ti ≤ 103, 1 ≤ Ki ≤ 103)가 공백으로 구분되어 주어진다.


[출력]

각 줄마다 "#T" (T는 테스트 케이스 번호)를 출력한 뒤,
주어진 제한 칼로리 이하의 조합중에서 가장 맛에 대한 점수가 높은 햄버거의 점수를 출력한다.

"""
import sys

sys.stdin = open('5215_input.txt', 'r')


def bit(arr, N, L, maxi):
    # N : 재료의 갯수
    # L : 칼로리 제한
    # maxi : 여태까지 중 최대 점수
    """

    비트연산자를 이용해서 부분집합을 만드는데, N의 최대값이 20이므로
    i for문은 최대 2^20번 돌게 된다. 이걸 그대로 쭉 돌면 메모리든, 시간이든 둘 중 하나는 무조건 터지기 때문에
    중간에 가지치기를 한번 해줘야한다.

    최초에는 가지치기를 마친 조합의 리스트를 return 했는데, 이렇게 해도 runtime error가 났다.
    N = 20, L = 10^4, 재료 칼로리 각각 = 1 이 되는 최악의 경우를 생각해보니,
    결국 len = 1 ~ 20의 리스트로 구성된 2^20 길이의 리스트를 반환해야한다.
    이런 경우에는 가지치기의 의미가 퇴색되므로, 메모리와 시간 부담이 적어지도록 리스트가 아닌, 결과 그 자체를 반환하도록 하였다.

    이 문제를 해결하면서 bit 함수의 역할은 아래와 같은 순서로 바뀌었다.

    1. 햄버거 리스트의 부분집합을 직접 리스트로 만든다 -> 결과 : 과도한 크기의 리스트를 만들다가 중간에 뻗음
    1.5 햄버거 리스트의 부분집합을 리스트로 만드는데, 칼로리 초과인 집합은 만들지 않는 것. -> 결과 : 1보다는 나았으나, 일부 케이스에서 1과 동일한 이유로 뻗음
    2. 햄버거 리스트의 부분집합의 요소를 계산 -> 결과 : Pass

    ** 리스트를 만드는 행위는 Test case의 크기가 커진다면 상당히 복잡한 명령이 된다는 것을 알게 되었다.

    ** 이런 큰 데이터를 다루는 경우, 가급적이면 생성이 아닌 요소를 참조하는 방향으로 설계하자.

    """

    for i in range(1 << N):
        sub_score = 0
        limit = 0
        for j in range(N):
            if i & (1 << j):
                sub_score += arr[j][0]
                limit += arr[j][1]
                if limit > L:
                    break
        if limit < L and sub_score > maxi:
            maxi = sub_score
    return maxi


TC = int(input())
for tc in range(1, TC + 1):
    N, L = list(map(int, input().split()))  # N 재료의 수 , L = 제한 칼로리
    s = []
    # s = 햄버거의 재료를 모아놓은 리스트
    for i in range(N):
        score, cal = list(map(int, input().split()))
        s.append([score, cal])
    # 최대 점수를 0으로 초기화 시켜주고 , bit 함수를 돌린다.
    print('#{0} {1}'.format(tc, bit(s, N, L, 0)))
