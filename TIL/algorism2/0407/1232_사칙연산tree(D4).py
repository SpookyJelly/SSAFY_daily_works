# 1232번 사칙연산 트리
# 사칙연산으로 구성되어 있는 식은 이진 트리로 표현할 수 있다. 아래는 식 “(9/(6-4))*3”을 이진 트리로 표현한 것이다.
#
# 임의의 정점에 연산자가 있으면 해당 연산자의 왼쪽 서브 트리의 결과와 오른쪽 서브 트리의 결과를 사용해서 해당 연산자를 적용한다.
# 사칙연산 “+, -, *, /”와 양의 정수로만 구성된 임의의 이진트리가 주어질 때, 이를 계산한 결과를 출력하는 프로그램을 작성하라.
#
# 단, 중간 과정에서의 연산은 실수 연산으로 하되, 최종 결과값이 정수로 떨어지지 않으면 정수부만 출력한다.
#
# 위의 예에서는 최종 결과값이 13.5이므로 13을 출력하면 된다.
#
# [입력]
#
# 각 테스트 케이스의 첫 줄에는 각 케이스의 트리가 갖는 정점의 총 수 N(1≤N≤1000)이 주어진다. 그 다음 N줄에 걸쳐 각각의 정점 정보가 주어진다.
#
# 정점이 단순한 수이면 정점번호와 해당 양의 정수가 주어지고, 정점이 연산자이면 정점번호, 연산자, 해당 정점의 왼쪽 자식, 오른쪽 자식의 정점번호가 차례대로 주어진다.
#
# 정점번호는 1부터 N까지의 정수로 구분된다. 입력에서 정점 번호를 매기는 특별한 규칙은 없으나, 루트 정점의 번호는 반드시 1이다.
#
# 입력에서 이웃한 수나 연산자는 모두 공백으로 구분된다.
#
# 위의 예시에서, 숫자 4가 7번 정점에 해당하면 “7 4”으로 주어지고, 연산자 ‘/’가 2번 정점에 해당하면 두 자식이 각각 숫자 9인 4번 정점과 연산자 ‘-’인 5번 정점이므로 “2 / 4 5”로 주어진다.
#
# 총 10개의 테스트 케이스가 주어진다.
#
# [출력]

# 부호와 함께 테스트 케이스의 번호를 출력하고, 공백 문자 후 테스트 케이스에 대한 답을 출력한다. 답은 항상 정수값으로 기록한다.


import sys

sys.stdin = open('1232_input.txt', 'r')


# 두 자식 노드를 탐색하고, 부모노드를 탐색하므로, 후위탐색법과 동일한 방향으로 접근하면 된다.

# lst[0] : 노드의 번호
# lst[1] : 노드의 value
# lst[2] : 노드의 left child
# lst[3] : 노드의 right child
def findingTheTruth(lst) -> int:
    result = 0
    # value가 정수꼴이다 -> leaf 노드이다. -> 계산할 값을 정수형으로 반환한다
    if lst[1].isdigit():
        return int(lst[1])

    else:
        # else문에 진입하는 lst는 전부 value가 연산자인 경우이다. -> 자식 노드 있음 -> 재귀구조로 자식 노드 탐색
        value_1 = findingTheTruth(tre[int(lst[2])])
        value_2 = findingTheTruth(tre[int(lst[3])])
        # 탐색을 끝마친 후, 연산자에 맞는 계산 수행 후 결과값을 return 한다.
        if lst[1] == '+':
            result = value_1 + value_2
        elif lst[1] == '-':
            result = value_1 - value_2
        elif lst[1] == '*':
            result = value_1 * value_2
        elif lst[1] == '/':
            result = value_1 / value_2
        return result


for tc in range(1, 11):
    N = int(input())
    tre = [[0, 0, 0, 0] for _ in range(N + 1)]
    # 입력값과 관계없이 무조건 4칸 사이즈로 받아, 입력의 편의를 높였다.
    for idx in range(1, N + 1):
        tre_set = list(input().split())
        tre[idx] = tre_set + tre[idx]
        tre[idx] = tre[idx][0:4]

    ans = int(findingTheTruth(tre[1]))
    print('#{0} {1}'.format(tc, ans))
