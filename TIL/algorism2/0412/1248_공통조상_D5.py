# 임의의 이진 트리가 주어지고, 두 정점이 명시될 때 이들의 공통 조상 중 이들에 가장 가까운 정점을 찾고, 그 정점을 루트로 하는 
# 서브 트리의 크기를 알아내는 프로그램을 작성하라.
# 입력에서 주어지는 두 정점이 서로 조상과 자손 관계인 경우는 없다.
# 위의 트리에서 예를 든다면 두 정점이 “11과 3”과 같이 주어지는 경우는 없다.

# [입력]

# 가장 첫줄은 전체 테스트케이스의 수이다.
# 10개의 테스트 케이스가 주어진다.
# 두 줄이 하나의 테스트 케이스가 되며, 따라서 전체 입력은 20줄로 이루어진다.
# 각 케이스의 첫줄에는 트리의 정점의 총 수 V와 간선의 총 수 E, 공통 조상을 찾는 
# 두 개의 정점 번호가 주어진다 (정점의 수 V는 10 ≤ V ≤ 10000 이다). 
# 그 다음 줄에는 E개 간선이 나열된다. 간선은 간선을 이루는 두 정점으로,
#  항상 “부모 자식” 순서로 표기된다.
# 위에서 예로 든 트리에서 정점 5와 8을 잇는 간선은 “5 8”로 표기되고, 
# 절대로 “8 5”와 같이 표기되지는 않는다.
# 간선이 입력되는 순서는 정해져 있지 않다. 
# 입력에서 이웃한 수는 모두 공백으로 구분된다.

# 정점의 번호는 1부터 V까지의 정수이며, 
# 전체 트리에서 루트가 되는 정점은 항상 1번으로 표기된다.

# 부모 정점이 자식 정점보다 항상 번호가 작은 것은 아니다. 
# 즉, 40번 정점이 20번 정점의 부모가 될 수도 있다.

# 이 문제에서 자식 정점이 부모 정점의 왼쪽 자식인지 오른쪽 자식인지는 중요하지 않다.

# [출력]

# 총 10줄에 10개의 테스트 케이스 각각에 대한 답을 출력한다.
# 각 줄은 테스트 케이스의 번호를 의미하는
#  ‘#x’로 시작하고 공백을 하나 둔 다음 답을 기록한다.
# 답은 공통조상 중 가장 가까운 것의 번호, 
# 그것을 루트로 하는 서브 트리의 크기를 뜻하는 2개의 정수로 구성된다. 
# 이 두 정수는 공백으로 구분한다.

import sys
sys.stdin = open('1248_input.txt','r')

def findLCA():
    tem = set()
    v = P[n1]
    while v:
        tem.add(v)
        v = P[v]
    
    v = P[n2]
    
    while v:
        if v in tem:
            return v
        v = P[v]

def treesize(v):
    global cnt
    if v == 0:
        return
    cnt += 1
    treesize(left[v])
    treesize(right[v])


TC = int(input())
for tc in range(1,TC+1):
    V,E,n1,n2 = map(int,input().split())
    tre = list(map(int,input().split()))

    # 자식 노드들과 부모노드를 표시할 1차원 행렬을 만든다
    # 크기는 V+1. --> 인덱스 번호와 노드 번호를 일치시키기 위해서이다
    left = [0] * (V+1)
    right = [0] * (V+1)
    P = [0] * (V+1)

    # 짝수 인덱스가 부모노드, 홀수 인덱스가 자식 노드
    for i in range(0,len(tre),2):
        p,c = tre[i], tre[i+1]
        if left[p] == 0:
            left[p] = c
        else:
            right[p] = c
        P[c] = p 

    lca = findLCA()
    cnt = 0
    treesize(lca)

    print('#{0} {1} {2}'.format(tc,lca,cnt))

